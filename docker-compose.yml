services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
  
  app:
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: '128M'
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ai_assistant
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d ai_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: '128M'
      restart_policy:
        condition: on-failure
  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:pass@postgres/aiagent
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postgres
      - app
    volumes:
      - .:/app
    command: python worker.py

  reminder-worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:pass@postgres/aiagent
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app
    command: python reminder_worker.py

networks:
  app-network:

volumes:
  redis_data:
  postgres_data: